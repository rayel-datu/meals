// Mocks generated by Mockito 5.4.5 from annotations
// in meal_app/test/repositories/meal_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:meal_app/app/data/meal_api.dart' as _i5;
import 'package:meal_app/features/categories/entities/dto/category_dto.dart'
    as _i2;
import 'package:meal_app/features/meals/entities/dto/meal_details_dto.dart'
    as _i4;
import 'package:meal_app/features/meals/entities/dto/meal_item_dto.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoryDto_0 extends _i1.SmartFake implements _i2.CategoryDto {
  _FakeCategoryDto_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMealDto_1 extends _i1.SmartFake implements _i3.MealDto {
  _FakeMealDto_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMealDetailsDto_2 extends _i1.SmartFake
    implements _i4.MealDetailsDto {
  _FakeMealDetailsDto_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MealApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealApi extends _i1.Mock implements _i5.MealApi {
  MockMealApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.CategoryDto> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i6.Future<_i2.CategoryDto>.value(
              _FakeCategoryDto_0(this, Invocation.method(#getCategories, [])),
            ),
          )
          as _i6.Future<_i2.CategoryDto>);

  @override
  _i6.Future<_i3.MealDto> getMeals(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#getMeals, [category]),
            returnValue: _i6.Future<_i3.MealDto>.value(
              _FakeMealDto_1(this, Invocation.method(#getMeals, [category])),
            ),
          )
          as _i6.Future<_i3.MealDto>);

  @override
  _i6.Future<_i4.MealDetailsDto> getMealDetailsById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getMealDetailsById, [id]),
            returnValue: _i6.Future<_i4.MealDetailsDto>.value(
              _FakeMealDetailsDto_2(
                this,
                Invocation.method(#getMealDetailsById, [id]),
              ),
            ),
          )
          as _i6.Future<_i4.MealDetailsDto>);
}

/// A class which mocks [MealItemDto].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealItemDto extends _i1.Mock implements _i3.MealItemDto {
  @override
  String get strMeal =>
      (super.noSuchMethod(
            Invocation.getter(#strMeal),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#strMeal),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#strMeal),
            ),
          )
          as String);

  @override
  String get strMealThumb =>
      (super.noSuchMethod(
            Invocation.getter(#strMealThumb),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#strMealThumb),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#strMealThumb),
            ),
          )
          as String);

  @override
  String get idMeal =>
      (super.noSuchMethod(
            Invocation.getter(#idMeal),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#idMeal),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#idMeal),
            ),
          )
          as String);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [MealDto].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealDto extends _i1.Mock implements _i3.MealDto {
  @override
  List<_i3.MealItemDto> get meals =>
      (super.noSuchMethod(
            Invocation.getter(#meals),
            returnValue: <_i3.MealItemDto>[],
            returnValueForMissingStub: <_i3.MealItemDto>[],
          )
          as List<_i3.MealItemDto>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [MealDetailsItemDto].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealDetailsItemDto extends _i1.Mock
    implements _i4.MealDetailsItemDto {
  @override
  set idMeal(String? _idMeal) => super.noSuchMethod(
    Invocation.setter(#idMeal, _idMeal),
    returnValueForMissingStub: null,
  );

  @override
  set strMeal(String? _strMeal) => super.noSuchMethod(
    Invocation.setter(#strMeal, _strMeal),
    returnValueForMissingStub: null,
  );

  @override
  set strMealAlternate(String? _strMealAlternate) => super.noSuchMethod(
    Invocation.setter(#strMealAlternate, _strMealAlternate),
    returnValueForMissingStub: null,
  );

  @override
  set strCategory(String? _strCategory) => super.noSuchMethod(
    Invocation.setter(#strCategory, _strCategory),
    returnValueForMissingStub: null,
  );

  @override
  set strArea(String? _strArea) => super.noSuchMethod(
    Invocation.setter(#strArea, _strArea),
    returnValueForMissingStub: null,
  );

  @override
  set strInstructions(String? _strInstructions) => super.noSuchMethod(
    Invocation.setter(#strInstructions, _strInstructions),
    returnValueForMissingStub: null,
  );

  @override
  set strMealThumb(String? _strMealThumb) => super.noSuchMethod(
    Invocation.setter(#strMealThumb, _strMealThumb),
    returnValueForMissingStub: null,
  );

  @override
  set strTags(String? _strTags) => super.noSuchMethod(
    Invocation.setter(#strTags, _strTags),
    returnValueForMissingStub: null,
  );

  @override
  set strYoutube(String? _strYoutube) => super.noSuchMethod(
    Invocation.setter(#strYoutube, _strYoutube),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient1(String? _strIngredient1) => super.noSuchMethod(
    Invocation.setter(#strIngredient1, _strIngredient1),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient2(String? _strIngredient2) => super.noSuchMethod(
    Invocation.setter(#strIngredient2, _strIngredient2),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient3(String? _strIngredient3) => super.noSuchMethod(
    Invocation.setter(#strIngredient3, _strIngredient3),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient4(String? _strIngredient4) => super.noSuchMethod(
    Invocation.setter(#strIngredient4, _strIngredient4),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient5(String? _strIngredient5) => super.noSuchMethod(
    Invocation.setter(#strIngredient5, _strIngredient5),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient6(String? _strIngredient6) => super.noSuchMethod(
    Invocation.setter(#strIngredient6, _strIngredient6),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient7(String? _strIngredient7) => super.noSuchMethod(
    Invocation.setter(#strIngredient7, _strIngredient7),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient8(String? _strIngredient8) => super.noSuchMethod(
    Invocation.setter(#strIngredient8, _strIngredient8),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient9(String? _strIngredient9) => super.noSuchMethod(
    Invocation.setter(#strIngredient9, _strIngredient9),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient10(String? _strIngredient10) => super.noSuchMethod(
    Invocation.setter(#strIngredient10, _strIngredient10),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient11(String? _strIngredient11) => super.noSuchMethod(
    Invocation.setter(#strIngredient11, _strIngredient11),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient12(String? _strIngredient12) => super.noSuchMethod(
    Invocation.setter(#strIngredient12, _strIngredient12),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient13(String? _strIngredient13) => super.noSuchMethod(
    Invocation.setter(#strIngredient13, _strIngredient13),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient14(String? _strIngredient14) => super.noSuchMethod(
    Invocation.setter(#strIngredient14, _strIngredient14),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient15(String? _strIngredient15) => super.noSuchMethod(
    Invocation.setter(#strIngredient15, _strIngredient15),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient16(String? _strIngredient16) => super.noSuchMethod(
    Invocation.setter(#strIngredient16, _strIngredient16),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient17(String? _strIngredient17) => super.noSuchMethod(
    Invocation.setter(#strIngredient17, _strIngredient17),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient18(String? _strIngredient18) => super.noSuchMethod(
    Invocation.setter(#strIngredient18, _strIngredient18),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient19(String? _strIngredient19) => super.noSuchMethod(
    Invocation.setter(#strIngredient19, _strIngredient19),
    returnValueForMissingStub: null,
  );

  @override
  set strIngredient20(String? _strIngredient20) => super.noSuchMethod(
    Invocation.setter(#strIngredient20, _strIngredient20),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure1(String? _strMeasure1) => super.noSuchMethod(
    Invocation.setter(#strMeasure1, _strMeasure1),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure2(String? _strMeasure2) => super.noSuchMethod(
    Invocation.setter(#strMeasure2, _strMeasure2),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure3(String? _strMeasure3) => super.noSuchMethod(
    Invocation.setter(#strMeasure3, _strMeasure3),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure4(String? _strMeasure4) => super.noSuchMethod(
    Invocation.setter(#strMeasure4, _strMeasure4),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure5(String? _strMeasure5) => super.noSuchMethod(
    Invocation.setter(#strMeasure5, _strMeasure5),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure6(String? _strMeasure6) => super.noSuchMethod(
    Invocation.setter(#strMeasure6, _strMeasure6),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure7(String? _strMeasure7) => super.noSuchMethod(
    Invocation.setter(#strMeasure7, _strMeasure7),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure8(String? _strMeasure8) => super.noSuchMethod(
    Invocation.setter(#strMeasure8, _strMeasure8),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure9(String? _strMeasure9) => super.noSuchMethod(
    Invocation.setter(#strMeasure9, _strMeasure9),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure10(String? _strMeasure10) => super.noSuchMethod(
    Invocation.setter(#strMeasure10, _strMeasure10),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure11(String? _strMeasure11) => super.noSuchMethod(
    Invocation.setter(#strMeasure11, _strMeasure11),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure12(String? _strMeasure12) => super.noSuchMethod(
    Invocation.setter(#strMeasure12, _strMeasure12),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure13(String? _strMeasure13) => super.noSuchMethod(
    Invocation.setter(#strMeasure13, _strMeasure13),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure14(String? _strMeasure14) => super.noSuchMethod(
    Invocation.setter(#strMeasure14, _strMeasure14),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure15(String? _strMeasure15) => super.noSuchMethod(
    Invocation.setter(#strMeasure15, _strMeasure15),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure16(String? _strMeasure16) => super.noSuchMethod(
    Invocation.setter(#strMeasure16, _strMeasure16),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure17(String? _strMeasure17) => super.noSuchMethod(
    Invocation.setter(#strMeasure17, _strMeasure17),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure18(String? _strMeasure18) => super.noSuchMethod(
    Invocation.setter(#strMeasure18, _strMeasure18),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure19(String? _strMeasure19) => super.noSuchMethod(
    Invocation.setter(#strMeasure19, _strMeasure19),
    returnValueForMissingStub: null,
  );

  @override
  set strMeasure20(String? _strMeasure20) => super.noSuchMethod(
    Invocation.setter(#strMeasure20, _strMeasure20),
    returnValueForMissingStub: null,
  );

  @override
  set strSource(String? _strSource) => super.noSuchMethod(
    Invocation.setter(#strSource, _strSource),
    returnValueForMissingStub: null,
  );

  @override
  set strImageSource(String? _strImageSource) => super.noSuchMethod(
    Invocation.setter(#strImageSource, _strImageSource),
    returnValueForMissingStub: null,
  );

  @override
  set strCreativeCommonsConfirmed(String? _strCreativeCommonsConfirmed) =>
      super.noSuchMethod(
        Invocation.setter(
          #strCreativeCommonsConfirmed,
          _strCreativeCommonsConfirmed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set dateModified(String? _dateModified) => super.noSuchMethod(
    Invocation.setter(#dateModified, _dateModified),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [MealDetailsDto].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealDetailsDto extends _i1.Mock implements _i4.MealDetailsDto {
  @override
  List<_i4.MealDetailsItemDto> get meals =>
      (super.noSuchMethod(
            Invocation.getter(#meals),
            returnValue: <_i4.MealDetailsItemDto>[],
            returnValueForMissingStub: <_i4.MealDetailsItemDto>[],
          )
          as List<_i4.MealDetailsItemDto>);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
