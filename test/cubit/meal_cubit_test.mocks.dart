// Mocks generated by Mockito 5.4.5 from annotations
// in meal_app/test/cubit/meal_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:meal_app/features/meals/domain/repositories/meal_repository.dart'
    as _i2;
import 'package:meal_app/features/meals/domain/use_cases/fetch_meals_use_case.dart'
    as _i5;
import 'package:meal_app/features/meals/domain/use_cases/search_meals_use_case.dart'
    as _i7;
import 'package:meal_app/features/meals/entities/models/meal_item_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMealRepository_0 extends _i1.SmartFake
    implements _i2.MealRepository {
  _FakeMealRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MealItemModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealItemModel extends _i1.Mock implements _i3.MealItemModel {
  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#id)),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#id),
            ),
          )
          as String);

  @override
  String get thumbnail =>
      (super.noSuchMethod(
            Invocation.getter(#thumbnail),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#thumbnail),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#thumbnail),
            ),
          )
          as String);

  @override
  String searchProp() =>
      (super.noSuchMethod(
            Invocation.method(#searchProp, []),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#searchProp, []),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.method(#searchProp, []),
            ),
          )
          as String);
}

/// A class which mocks [FetchMealsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchMealsUseCase extends _i1.Mock implements _i5.FetchMealsUseCase {
  MockFetchMealsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MealRepository get mealRepository =>
      (super.noSuchMethod(
            Invocation.getter(#mealRepository),
            returnValue: _FakeMealRepository_0(
              this,
              Invocation.getter(#mealRepository),
            ),
          )
          as _i2.MealRepository);

  @override
  _i6.Future<List<_i3.MealItemModel>> execute(
    String? category, [
    bool? refresh = false,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [category, refresh]),
            returnValue: _i6.Future<List<_i3.MealItemModel>>.value(
              <_i3.MealItemModel>[],
            ),
          )
          as _i6.Future<List<_i3.MealItemModel>>);
}

/// A class which mocks [SearchMealsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMealsUseCase extends _i1.Mock
    implements _i7.SearchMealsUseCase {
  MockSearchMealsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MealRepository get mealRepository =>
      (super.noSuchMethod(
            Invocation.getter(#mealRepository),
            returnValue: _FakeMealRepository_0(
              this,
              Invocation.getter(#mealRepository),
            ),
          )
          as _i2.MealRepository);

  @override
  _i6.Future<List<_i3.MealItemModel>> execute(
    String? category, {
    required String? keyword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [category], {#keyword: keyword}),
            returnValue: _i6.Future<List<_i3.MealItemModel>>.value(
              <_i3.MealItemModel>[],
            ),
          )
          as _i6.Future<List<_i3.MealItemModel>>);

  @override
  List<_i3.MealItemModel> search(
    List<_i3.MealItemModel>? source,
    String? keyword,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#search, [source, keyword]),
            returnValue: <_i3.MealItemModel>[],
          )
          as List<_i3.MealItemModel>);
}
