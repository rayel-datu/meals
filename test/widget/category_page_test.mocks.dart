// Mocks generated by Mockito 5.4.5 from annotations
// in meal_app/test/widget/category_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:meal_app/features/categories/entities/models/category_model.dart'
    as _i3;
import 'package:meal_app/features/categories/presentation/cubit/category_cubit.dart'
    as _i5;
import 'package:meal_app/features/categories/presentation/cubit/category_state.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoryState_0 extends _i1.SmartFake implements _i2.CategoryState {
  _FakeCategoryState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CategoryModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryModel extends _i1.Mock implements _i3.CategoryModel {
  @override
  String get category =>
      (super.noSuchMethod(
            Invocation.getter(#category),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#category),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#category),
            ),
          )
          as String);

  @override
  String get thumbnail =>
      (super.noSuchMethod(
            Invocation.getter(#thumbnail),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#thumbnail),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#thumbnail),
            ),
          )
          as String);

  @override
  String get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#description),
            ),
          )
          as String);

  @override
  String searchProp() =>
      (super.noSuchMethod(
            Invocation.method(#searchProp, []),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#searchProp, []),
            ),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.method(#searchProp, []),
            ),
          )
          as String);
}

/// A class which mocks [CategoryCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryCubit extends _i1.Mock implements _i5.CategoryCubit {
  @override
  _i2.CategoryState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCategoryState_0(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeCategoryState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.CategoryState);

  @override
  _i6.Stream<_i2.CategoryState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i2.CategoryState>.empty(),
            returnValueForMissingStub: _i6.Stream<_i2.CategoryState>.empty(),
          )
          as _i6.Stream<_i2.CategoryState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i6.Future<void> fetchCategories({bool? refresh = true}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchCategories, [], {#refresh: refresh}),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> search(String? keyword) =>
      (super.noSuchMethod(
            Invocation.method(#search, [keyword]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void emit(_i2.CategoryState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i2.CategoryState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
